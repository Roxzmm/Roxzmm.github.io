[{"categories":["游戏"],"content":"总览 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:1:0","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"工作职责 初级 中级 高级 程序向 工具编写 DCC工具开发 自动化工具系统 渲染知识、效果 深度优化渲染管线 美术流程 效率优化 环节规范 美术向 建立美术动作规范 深度制定流程，确定效果标杆 制定效果标杆 技术美术（制作内容） Shaders Effects Workflows R\u0026D Optimization, debugging Education Connecting artists with programmers Pipeline Tools Animation and rigging tools 图形程序（制作工具） ATTACH ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:1:1","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"技术方向 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:0","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"DCC工具的基本使用 模型、贴图、动画制作 3D Max，Maya, Blender 建模、动画 ZBrush 雕刻模型、低模高模、贴图制作 Substance 贴图绘制 Houdini 程序化生成 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:1","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"引擎 Unity、UE 渲染管线 粒子特效 光照灯光 材质着色器 动画 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:2","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"NPR 以美学经验为理论基础。高度依赖于创作者的经验和审美能力。 \u003e 既然这方面并不需要所谓真实的理论基础，那是否可以借助当前的AI技术，通过数据形成渲染参数模型。AI generated stylization \u003e 绘画相比摄像的优势在于提取主观而关键的信息来表达，NPR也是如此。 引擎材质与美术模型的配合很重要 模型脸部法线对于NPR的阴影效果影响很重要。 底层基础 光照模型 缺乏系统的光照模型 基于引擎，或是自研 相机模型 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:3","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"PBR 当今的GPU图形管线和3D美术流程，是为了PBR量身打造的，而NPR需要使用各种Trick。 以物理光学和微分几何为理论基础。 光照模型 高质量美术模型、细节及贴图 基于物理和摄影的场景灯光 PBR材质 皮肤 眼睛 毛发 衣服 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:4","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"效果 描边 - Pencil4+的效果、参考动漫行业标准 Toon-shading - 迪士尼的头发效果 Fog Everything Ambient Occlusion Anti-aliasing ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:5","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"后处理 Paraffin 赛璐璐动画中彩色石蜡纸通过叠加在赛璐璐胶片上，光与暗的反射产生的特殊效果。 Diffusioin 模糊 Kuwahara 平滑滤波，油画效果 Cinematic Dof 景深 Lens Flares 圆形镜头光晕 Bloom · Exposure 曝光 Chromatic Aberration 色差 Vignette Intensity Color Grading LUT Motion Blur ToneMapping ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:6","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"场景渲染 大气、云、植被、地形 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:7","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"渲染管线 Forward Rendering Deferred Rendering Tile-based Rendering etc.. GAMES104笔记 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:8","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"物理模拟 布料模拟 基于刚体 基于网格 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:9","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"平台针对性 移动端效果提升及性能优化 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:10","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"硬件底层 不同图形API AMD FSR（FidelityFX Super Resolution) 空间像素倍增技术，用于提升帧率 Nvidia DLSS 通过AI提升分辨率 虚拟纹理 屏蔽了中间层的像素-\u003e渲染接口 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:11","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"格式规范 贴图压缩标准 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:12","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"LookDev 交互式查看接近最终品质的渲染结果，立即看到材质、灯光、渲染参数修改带来的效果反馈。 lookdev ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:13","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"新技术 神经风格迁移 Unity Barracuda库有支持，可以即用 神经辐射场建模 NeRF三维建模 仅用2d的posed images作为监督，即可表示复杂的三维场景。(适合用于做跟客户交互的设计原型Demo，场景建模) ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:2:14","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"发展目标 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:3:0","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"模型渲染 NPR 小k 抖音直播伴侣 PBR Unity HDRP Enemies HairFX制作 SSS制作 UE MetaHuman UE Metahuman剖析 Maya X-gen for Hair BlendShape制作 or 生成 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:3:1","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"性能优化 PC 移动端 ","date":"2023-07-09","objectID":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/:3:2","tags":["渲染","game-engine"],"title":"渲染领域发展路线","uri":"/%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"},{"categories":["游戏"],"content":"Introduction This is a Unity implementation of a board game with some kinds of automatic players based on Monte Carlo Tree Search. ","date":"2022-11-05","objectID":"/mctsboardgame/:1:0","tags":["Game","Mcts","Unity","游戏开发"],"title":"MctsBoardGame","uri":"/mctsboardgame/"},{"categories":["游戏"],"content":"Demo Link: https://roxzmm.github.io/Mctsboardgame/ ","date":"2022-11-05","objectID":"/mctsboardgame/:1:1","tags":["Game","Mcts","Unity","游戏开发"],"title":"MctsBoardGame","uri":"/mctsboardgame/"},{"categories":["游戏"],"content":"Attention ","date":"2022-11-05","objectID":"/mctsboardgame/:2:0","tags":["Game","Mcts","Unity","游戏开发"],"title":"MctsBoardGame","uri":"/mctsboardgame/"},{"categories":["游戏"],"content":"Settings The number of players could only be 2, or 3, or 4. The number of characters for each player could only be 2, or 3, or 4. The size of board should be large enough to hold all players’ characters. ","date":"2022-11-05","objectID":"/mctsboardgame/:2:1","tags":["Game","Mcts","Unity","游戏开发"],"title":"MctsBoardGame","uri":"/mctsboardgame/"},{"categories":["游戏"],"content":"MCTS MctsDDA: This computer will always try to keep close with your scores and it will not try to beat you. MctsVictory: This computer will try its best to beat you and it can beat random player simply indeed. But don’t worry, it’s still hard for this computer to beat a real human player now because I haven’t done enough optimizations for its algorithm efficiency. So, I believe you can beat it hard. Both MCTS computer players will take about 4 seconds during their playing turns. Please don’t worry if the screen seems stucked, it happens just because the computer needs time to think how to beat you. And, of course, you have nearly infinite time during your turn, computers have no way to disturb you. ","date":"2022-11-05","objectID":"/mctsboardgame/:2:2","tags":["Game","Mcts","Unity","游戏开发"],"title":"MctsBoardGame","uri":"/mctsboardgame/"},{"categories":["游戏"],"content":"引擎架构 ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:1:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"平台层 Platform 提供操作系统/平台相关的底层功能。 文件系统 file_service 路径 path ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:1:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"核心层 Core 提供软件系统常用模块。 基础库 base（宏、哈希） 色彩 color 数学库 math 元数据系统 meta 反射 reflection 序列化/反序列化 serializer 日志系统 log ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:1:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"资源层 resource 提供资产加载、保存功能，资产的结构化数据定义和相关路径配置等。 资产系统 asset_manager 配置系统 config_manager 结构化数据定义 res_type 全局数据 global 全局粒子设置 global_particle 全局渲染配置 global_rendering 通用数据 common 世界 world 关卡 level 对象 object 组件数据 components 动画 animation 相机 camera 粒子发射器 emitter 网格 mesh 运动 motor 刚体 rigid_body 其他数据 data 动画片短 animation_clip 动画骨骼节点 animation_skeleton_node_map 基本形状 basic_shape 动画混合状态 blend_state 相机配置 camera_config 材质 material 网格数据 mesh_data 骨骼 skeleton_data 骨骼掩膜 skeleton_mask ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:1:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"功能层 function 提供引擎功能模块。分为框架和子系统两部分。 框架 framework 运行时功能和新框架。核心框架采用世界`world`-关卡`level`-GameObject`obejct`-组建`component`的层级架构。 世界管理器 world_manager 负责管理世界的加载、卸载、保存，和tick下属当前关卡。 关卡 level 负责加载、卸载、保存关卡。同时关卡也管理下属GO的tick、创建和删除。 游戏对象 object 负责加载、保存GO。同时GO也管理下属组件。 组件包括： 动画 animation 相机 camera 网格 mesh 运动 motor 粒子 particle 刚体 rigidbody 变换 transform 动画 animation 角色 character 控制器 controller 全局上下文 global 输入 input 粒子 particle 物理 physics 渲染 render UI ui ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:1:4","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"渲染（Rendering) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:2:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"实践 GPU Batch Rendering 合批处理，集中管理资源，使用索引获取目标资源 可见性裁剪 用包围盒判断是否在事件锥里 包围球 (sphere) AABB 矩形盒（对角线长等于物体长度） OBB 矩形盒（高度等于物体长度） 8-DOP CONVEX HULL（凸包） 用BVH的方法进行性能优化 PVS(Potential Visibility Set) 简单的可见区域估计（也可用于资源加载） GPU Culling 让显卡来算 做深度测试，先绘制深度图，再绘制其他，有看不见的就跳过 Texture Compression （纹理压缩） Block Compression ASTC算法（Mobile） ， BC7算法（PC） Authoring Tools of Modeling Polymodeling BLENDER MAX MAYA Sculpting （雕刻性的工具）(z-brush) Scanning（实体扫描） Procedural Modeling Houdini Unreal Cluster-Based Mesh Pipeline （现代） GPU-Driven Rendering Pipeline(2015) Geometry Rendering Pipeline Architecture(2021) （一个完整的物体被拆分成多个小集群） Nanite ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:2:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"绘制 Lighting The Rendering Equation (BRDF) Simple light + Ambient Blinn-Phong Materials = Ambient + Diffuse + Specular（光可叠加原理） cons: 能量不守恒，震荡被放大，做什么都像塑料 Shadow Shadow Map cons: 取决于采样率 Pre-computed Global Illumination 空间换时间，预计算全局光照。 全局光照 = 直接光照和间接光照都有。 用Fourier Transform（傅里叶变换）来处理。 Spherical Harmonics（球谐函数）。 SH Lightmap: 预先计算光照贴图 （预计算时间长，但是运行时很高效，能烘焙很多很好的细节）（前景不好） Light Probe:＋ Reflection Probe 放足够多的采样点，计算目标最近的采样点的光照，再用插值计算 Material Physical-Based Material (PBR) Microfacet Theory （微平面理论） GGX模型 Fresnel Equation Disney Principled BRDF SG模型(Specular Glossiness) Diffuse Specular Glossiness MR模型(Metallic Roughness) Base Color Roughness Metallic Image-Based Lighting (IBL) Diffuse Irradiance Map Specular Approximation Classic Shadow Solution Cascade Shadow PCF - Percentage Closer Filter PCSS - Percentage Closer Soft Shadow（软阴影） VSSM - Variance Soft Shadow Map Virtual Shadow Maps Shader Uber Shader and Vaiants ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:2:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"地形中大气和云的渲染 Sky and Cloud Vegetation Terrain Simple Idea - Heightfield Adaptive Mesh Tessellation Triangle-Based Subdivision QuadTree-Based Subdivision (more popular) cons: T-Junctions（格子间会有空隙） Triangulated Irregular Network 需要预处理 GPU-Based Tessellation Mesh Shader Pipeline real-time deformable terrain Non-Heightfield Terrain Volumetric Representation (Crazy idea) Marching Cubes Paint Terrain Materials Parallax and Displacement Mapping Virtual Texture DirectStorage \u0026 DMA (硬盘到显存，跳过cpu、内存) Floating-point Precision Error (when map is too big) (IEEE 754 float double) Camera-Relative Rendering Tree Rendering Decorator Rendering Road and Decals Rendering Atmosphere and Cloud Atmoshpere Analytic Atmosphere Appearance Modeling Participating Media （有关介质） Radiative Transfer Equation Volume Rendering Equation(VRE) Scattering Types Rayleigh Scattering Mie scattering Variant Air Molecules Absorption Single Scattering vs Multi Scattering （单次 vs 多次散射） Ray Marching Precomputed Atmospheric Scattering Production Friendly Quick Sky and Atmosphere Rendering Cloud Mesh-Based Cloud Modeling Billboard Cloud Volumetric Cloud Modeling Weather Texture Noise Functions Perlin Noise Worley Noise Cloud Density Model ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:2:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"渲染管线,后处理及其他 Ambient Occlusion （环境光遮蔽） Screen Space Ambient Occlusion (SSAO), SSAO+ HBAO - Horizon-based Ambient Occlusion GTAO - Ground Truth-based Ambient Occlusion Ray-Tracing Ambient Occlusion Fog Everything Depth Fog Height Fog Voxel-based Volumetric Fog Anti-aliasing（抗锯齿） 多采样几个，然后计算加权。问题一般出现在边缘上。 Super-sample AA (SSAA) and Mutli-sample AA (MSAA) FXAA(Fast Approximate Anti-aliasing) 用边缘检测来寻找需要更多采样的地方 TAA(Temporal Anti-aliasing) 时序上用前一帧的数据 Post-process Bloom Effect (光晕效果) Detect Bright Area by Threshold Gaussian Blur Pyramid Gaussian Blur Tone Mapping （色调映射）解决曝光问题 Tone Mapping Curve 拟合出来的 ACES 奥斯卡搞的 Color Grading Lookup Table (LUT)（色彩分级） Rendering Pipeline Forward Rendering 透明物最后绘制，绘制多个透明物时，由远及近地绘制 Deferred Rendering （延迟渲染） Tile-based Rendering Light Culling by Tiles Depth Range Optimization Tile-based Deferred Rendering Forward+（Tile-based Forward） Rendering Cluster-based Rendering (椎体) Visibility Buffer G-Buffer V-Buffer 当几何数多于像素数时，用V-Buffer好，把几何和材质分离。 Frame Graph use DAG(Directed Acyclic Graph) to check the rightness of every module in the project Render to Monitor Screen Tearing use V-Sync to solve （垂直同步） Variable Refresh Rate （可变刷新率） ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:2:4","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"动画 (Animation) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:3:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Basics of Animation Technology Hand Draw Animation -\u003e Cel Animation -\u003e Computer Animation 2D Animation Sprite animation Live2D set animation “key frame” 3D Animation Dof(Degrees of Freedom)（自由度） Rigid Hierarchical Animation Per-vertex Animatioin 离线渲染，然后作为材质载入 Morph Target Animation Skinned Animation Physics-based Animation Ragdoll 布娃娃系统 Cloth and Fluid Inverse Kinematics(IK) Animation Content Creation Digital Content Creator + Animator Motion Capture （动捕） Skinned Animation Implementation 存骨骼关节数据，其他顶点跟着关节动 蒙皮动画(主流) How to Animate a Mesh Different Spaces local space model space world space Skeleton for Creatures Non-humanoid Skeleton Humanoid Skeleton Joint vs. Bone （关节 和 骨骼） 一般指的都是关节 Joints for gameplay (eg. weapon) mount Root Joint Bind Animation for Objects bind point Bind Pose - T-pose vs. *A-pose Skeleton Pose Joint Pose (9 DoFs) Orientation (3 DoFs) 旋转 Position (3 DoFs) 平移 Scale (3 DoFs) 放缩 Math of 3D Rotation 2D Orientation Math 3D Orientation Math Euler Angle !Order Dependence case: Gimbal Lock 万向结、陀螺仪、云台 Yaw 航向偏转 Pitch 俯仰 Roll 翻转 Problems: 退化（当沿着Y轴旋转90度后，x、z共轴） Quaternion （四元数） Joint Pose Affine Matrix Local space to Model space Skinning Matrix （目标点根据绑定的关节变化进行变化） Skinning Matrix Palette 预计算完一个模型所有的蒙皮矩阵后存成表 Weighted Skinning with Multi-joints 顶点一般最多绑定4个关节 加权蒙皮矩阵 Weighted Skinning Blend 发生在model space Clip Quaternion Interpolation (NLERP) Shortest path fixing of NLERP cons: 角度变化速度不稳定，首尾快，中间慢 SLERP: Uniform Rotation Interpolation Simple Animation Runtime Pipeline Updated Animation Pipeline with Blending and IK Clip + time -\u003e previous frame - current frame -\u003e local current pose -\u003e model current pose -\u003e skinning matrix palette -\u003e mesh vertex position Animation Compression clip storage animation data size Distinction among Animation Tracks Distinction among Joints Simplest Compression - DoF Reduction Keyframe 计算关键帧，其余帧用插值计算 Catmull-Rom Spline 用于旋转插值 Float Quantization Quaternion Quantization Error Propagation 错误扩散 Joint Sensitivity to Error Measuring Accuracy - Data Error Visual Error Error Compensation - In Place Correction Animation DCC Mesh Skeleton binding Skinning Animation creation Exporting 跳跃时，动画和位移曲线应该分开存 ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:3:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Advanced Animation Technology Animation Blending means that allows more one animation clip to contribute to the final pose of the character Math of Blending: LERP 做线性插值 在clip之间插值 Calculate Blend Weight Align Blend Timeline Blend Space 1D Blend Space: Directional Movement Directional Walking and Running 2D Blend Space Skeleton Masked Blending 分上下半身和该动作结合 Additive Blending 只存动画的变化量，不存绝对量，然后应用到任何clip上 可能产生Abnormal Bone Results Action State Machine state transition: when and how Cross Fades Smooth transition Frozen transition Cross Fades Curve Layered ASM 模型的不同部分分开控制 Animation Blend Tree LERP Blend Node Additive Blend Node Blend Tree Nodes Inverse Kinematics Basic Concepts End-effector （末端效果器） IK(Inverse Kinematics) （反向运动学） FK(Forward Kinematics) Two Bones IK Complexity of Multi-Joint IK Solving Check Reachability of the Target Constraints of Joints Heuristics Algorithm CCD (Cyclic Coordinate Decent) Optimized: add tolerance region use under-damped angle FABRIK (Forward and Backward Reaching Inverse Kinematics) Multiple End-Effectors IK with Multiple End-Effectors Jacobian Matrix Other IK Solutions Physics-based Method PBD(Position Basesd Method) Fullbody IK in UE5 IK is still Chanllenge Updated Animation Pipeline with Blending and IK Simple Animation Runtime Pipeline Clip + time -\u003e Blend Pose -\u003e Model Pose -\u003e World Pose -\u003e IK -\u003e World Current Pose -\u003e skinning matrix palette -\u003e mesh vertex position Animation Pipeline Animation Graph Facial Animation Facial Action Coding System Action Units Combination 28 core units Key Pose Blending FACS in Morph Target Animation Complex Facial Skeleton UV Texture Facial Animation Muscle Model Animation Metahuman Retargeting Share Animation among Characters Terminology Source Character Target Character Source Aniamtion Target Animation Ignore Offset Between Source and Target Joints Keep Orientation in Different Binding Pose 存相对变化而非绝对变化 Process Tracks Align Movement by Pelvis Height Lock Feet by IK after Retargeting 离线做比较好 Retargeting with Different Skeleton Hierarchy 都归一化，再重新互相对应 Unresolved Problems of Retargeting self mesh penetration self contact constrains Morph Animation Retargeting ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:3:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"物理系统 (Physics System) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:4:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Basic Concepts Physics Actors and Shapes Actors static dynamic triggers kinematics Actor Shapes Spheres Capsules Boxes Convex Meshes Triangle Meshes only static actors Height Fields Shape Properties Mass Gomboc Shape Density Center of Mass Friction \u0026 Restitution （摩擦力和弹性） Forces Gravity Drag Friction Impulse … Movements Explicit(Forward) Euler’s Method 过去决定现在 取决于delta_t的精度，不收敛 Implicit(Backward) Euler’s Method 现在决定过去 衰减的 Semi-implicit Euler’s Method 显式和隐式结合一下。速度用显式的，距离用隐式的 稳定 Particle Dynamics （质点动力学，都没考虑形状、旋转） Rigid Body Dynamics 除了质点动力学的性质，还有: Orientation Angular velocity Angular acceleration Inertia tensor Rotational Inertia （转动惯量） Angular momentum （角动量） Torque （力矩） Collision Resolution Two Phases Broad phase Objectives find intersected rigid body AABBs Potential overlapped rigid body pairs Methods BVH Sort and Sweep Narrow phase Objectives Detect overlapping precisely Gererate contact information Methods Basic Shape Intersection Test Minkowski Difference-based Methods GJK Algorithm Separating Axis Theorem （分离轴定理） Resolution Applying Penalty Force Solving constrainsk 约束求解 Scene Query Raycast Sweep Overlap ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:4:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Efficiency, Accuracy, and Determinism Collision Group 可碰撞的物品放一个组里存 Simulation Optimization Island -\u003e sleep 把物理世界分成一个个island，不活动的就让它sleep Continuous Collision Detection 运动速度过快时，发生类似隧穿效应的现象。在检测碰撞前，Actor已经穿过了障碍物。 Deterministic Simulation 多人游戏中，同样的错误应当对全体玩家产生同样的效果。确定的输入，应当产生确定的结果。 浮点型运算会有影响 same old states + same inputs = same new states 如果能做到确定性模拟，多人游戏可以不同步服务器状态，只同步输入。 ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:4:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Applications Character Controller Kinematic Actor Shape: Capsule（两层，一层保护，一层检测碰撞 Collide with environment Auto Stepping and its Problem Slope Limits and Force Sliding Down Controller Volume Update Controller Push Objects Problem case: Standing on Moving Platform Ragdoll Map Skeleton to Rigid Bodies Human Joint Constraint Constraints Properties Animating Skeleton by Ragdoll Blending between Animation and Ragdoll Powered Ragdol - Physics-Animation Blending Cloth Animation-based Cloth Simulation Rigid Body-based Cloth Simulation Mesh-based Cloth Simulation Render Mesh vs. Physical Mesh Paint Cloth Simulation Constraints Set Cloth Physical Material Cloth Solver - Mass-Spring System Verlet Integration （半隐式欧拉积分的变式） Cloth Solver - Position Based Dynamics (PBD) 约束求解 Self Collision make the cloth thicker use many substeps enforce maximal velocity introduce contact constraints and friction constraints Destruction Chunk Hierarchy Connectivity Graph Connectivity Value Damage Calculation Destruction with / without Support Graph Build Chunks by Voronoi Diagram Fracturing with Voronoi Diagram Mesh Different Fracture Patterns with Voronoi Diagram Destruction in Physics System handle destruction after collision Make it realistic 提供一些回调函数 Popular Destruction NVIDIA APEX Destruction NVIDIA Blast Havok Destruction Chaos Destruction Vehicle Vehicle Implementation Spectrum Stylized -\u003e Realistic Vehicle Mechanism Modeling Traction Force （牵引力） Suspension Force （悬挂力） Tire Forces （轮胎力） Center of Mass Weight Transfer Steering angles Ackermann steering Advanced Wheel Contact Single Raycast Spherecast Advanced Physics: PBD/XPBD Lagrange Circling Constraint String Constraint PBD - Constraints Projection Position Based Dynamics XPBD - Extended Position Based Dynamics Compliance matrix 服从度矩阵 ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:4:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"DONE homework3 animation system and physics system ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:4:4","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"粒子和声效系统 Effects ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:5:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Particle System Particle’s Life Cycle spawn -\u003e aging -\u003e reaction -\u003e death Particle Emitter a particle system is a collection of individual emitters Particle Spawn Position Particle Spawn Mode Simulate Gravity Viscous Drag Wind Fields Collision Particle Type Billboard Particle always face the camera, appear to 3d Mesh Particle Ribbon Particle 滞留感, Centripetal Catmull-Rom interpolation Particle System Rendering Alpha Blending Order Particle Sort Sorting mode Global accurate, but expensive Hierarchy per system - per emitter - within emitter Sort rules Between particles: based on particle distance with camera Between systems or emitters: bounding box Full-Resolution Particles Costy, Worst case as particles fill the screen Low-Resolution Particles Downsampling (scene depth) -\u003e half-res depth -\u003e particle color \u0026 particle alpha -\u003e Bilateral upsampling (both scene color and scene depth) -\u003e final image GPU Particles Initial State Particle Pool Dead List Alive List Spawn Particles Simulate view frustum culling Sort, Render and Swap Alive Lists Parallel Mergesort Depth Buffer Collision Advanced Particles Crowd Simulation Animated Particle Mesh Particle Animation Texture Navigation Texture Signed Distance Field, Direction Texture (RG channels) Runtime Behavior Skeleton Mesh emitter Dynamic Procedural Splines Interacting with environment … Design Philosophy Preset Stack-Style Modules Graph-Based Design Hybrid Design Unreal’s Niagara System Design ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:5:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Sound System Audio Volume Sound Pressure （分贝） Particle Velocity Sound Intensity Pitch 音高 Timbre 音色 Phase and Noise Cancelling Human Hearing Characteristic Digital Sound Pulse-code Modulation (PCM) Sampling Nyquist-Shannon Sampling Theorem Quantizing bit-depth Encoding audio format 游戏行业OGG格式用的多，无版权问题 3D Audio Rendering 3D Sound Sources Listener a virtual microphone position velocity orientation Spatialization Panning Soundfield Full-sphere used in 360 videos and VR Binaural Audio Attenuation （衰弱）制造空间感 Attenuation Shape Sphere Capsule Box Cone Obstruction and Occlusion Reverb （混响） Direct(dry) Early reflections(echo) Late reverberations(tail) Reverberation Time Absorption Reverb in Action - Reverb Effect Control from Acoustic Parameters Pre-delay HF ratio Wet level Dry level Sound in Motion: The Doppler Effect Common Middlewares fMod WWise ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:5:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"引擎 (Tool Chains) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:6:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Foundation of Tool Chains What is Game Engine Tool Chains 适应各工种特性、调和各工种矛盾，使之能一起工作 Complicated Tool GUI fast iteration separation of design and implementation reusability … Immediate Mode Retained Mode* Design Pattern MVC (model - view - controller) MVP (model - view - presenter) MVVM (model - view - viewmodel) How to Load Asset - Desesrialization Serialization and Deserialization Text Files 先用text，方便debug，再改成json或者别的。 Binary Files (eg. FBX) Asset Reference Asset Data Repeatance Object Instance in Scene Object Instance Variance Build Variance by Copying Build Variance by Data Inheritance Parse Asset File Build Key-Type-Value Pair Tree Binary vs. Text Endianness （字节序） Asset Version Compatibility Version Hardcode (add version code) Field UID (Google Protocol Buffers) How to Make a Robust Tools !!!Undo \u0026 Redo Crash Recovery Command abstract operations to atomic commands which can invoke, revoke and serialize, deserialize Definition uid data Invoke() Revoke() Serialize() 由data提供 Deserialize() 由data提供 Three Key Commands Add Delete Update How to Make Tool Chain Find Common Building Blocks Schema A Description Structure Basic Elements Inheritance Data Reference 2 Definition Ways standalone schema definition file defined in code Reflection in Piccolo Engine Three Views for Engine Data Runtime View Storage View Tools View Various Editor Modes What You See is What You Get (WYSIWYG) Stand-alone Tools *In Game Tools Editor Mode Play in Editor(PIE) Play in Editor World Play in PIE World: duplicate editor world to create a PIE world and play in it One More Thing - Plugin Extensibility Framework PluginManager Interface API toolbar, tool menu ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:6:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Applications \u0026 Advanced Topic Glance of Game Production Architecture of A World Editor Editor Viewport warning: editor-only code must be moved out of released game Everything is an Editable Object Different Views of Objects Schema-driven Object Property Editing Content Browser Editing Utilities in World Editor Mouse Picking Ray Casting RTT Object Transform Editing Terrain Height Brush Instance Brush Environment sky, light, roads, rivers … Rule System in Environment Editing Plugin Architecture Any system and object type could be plug-ins to Editors Combination of Multiple Plugins Covered Distributed Pipeline Onion rings One More Thing - Version Control Design Narrative Tools Sotrytelling in Game Engine Sequencer Track Propertry Track Timeline Key Frame Sequence Reflection and Gameplay Reflection is Foundation of Sequencer Visual Scripting System A Common Solution - Reflection Reflection Build the Bridge between Code and Tools How to Implement Reflection in C++ AST Generate Schema from AST Precise Control of Reflection Scope Use Marco to Add Reflection Controls Reflection Accessors Code Rendering use Mustache for code generation Collaborative Editing Bottlenecks in Large Projects Merging Conflicts Split Assets Layering the World (cons: dependence) Divide the World (cons: cross-boundary) One File Per Actor Coordinate Editing in One Space Synchronize Operations with Others how to ensure the consistency of distributed operations? eg. Instance lock eg. Asset lock How to Solve these problems thoroughly Operation Transform (OT) Conflict-free Replicated Data Type(CRDT) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:6:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"DONE homework4 toolchain ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:6:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"玩法 (Gameplay) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:7:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Gameplay Complexity and Building Blocs Overview Challenges Cooperation among multiple systems Diversity of game play in the same game Rapid iteration Event/Message Mechanism Publish-subscribe Pattern Event Definition should be editable (as extension) type argument Callback Registration Object Lifespan and Callback Safety Object Strong Reference Object Weak Reference Event Despatching Immediate Event Queue Event Serializing and Deserializing Ring buffer Batching cons: Timeline not determined by publisher, one-frame delays Script System Problem of Compiled Languages hard for hot-update Pros of Scripting languages support for rapid iteration easy to learn and write support for hot update stable, less crash by running in a sandbox How Script Languages Work script text -\u003e bytecode -\u003e run on VM Object Management between Scripts and Engine engine manage script manage Architectures for Scripting System Native language dominants the game world Script language dominants the game world Advanced Script Features Hot Update Popular Script Languages Lua Robust and mature Excellent runtime performance Light-weighted and highly extensible Python Reflection support Built-in object-oriented support Extensive standard libraries and third-party modules C# Low learning curve Built-in object-oriented support Great community Visual Scripting Variable Visualization - Data Pin and Wire Statement and Expression Visualization - Node Control Flow Visualization - execution Pin and Wire Function Visualization - Function Graph Class Visualization - Blueprint Make Graph User Friendly Fuzzy finding Accurate suggestions by type Visual Script Debugger Issues Hard to merge for a team work visual script is stored as a binary file manually reorder script graph is inefficient and error-prone graph can get pretty messy with complex logic Script and Graph are Twins Character, Control and Camera Character Movement Movement State Machine more complex and varied states cooperate with other systems more realistic motion with Physics Control Different input device Different game play case: shoot Zoom in and out Aim Assist Feedback Context Awareness Context-sensitive controls Chord \u0026 Key Sequences Subjective Feelings Camera Basic: POV \u0026 FOV Camera Control Spring Arm Focuing FOV \u0026 distance Curve Camera Track Camera Effects Camera Shake Camera Filter Camera Manager Camera Switch Subjective Feelings loose feeling Cinematic Everything is Gameplay … ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:7:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Basic Artificial Intelligence Navigation Navigation Steps Map Representation Walkable Area Formats Waypoint Network 先走到路网上，再沿着路网走。（像地铁网一样，先到站点，再自动寻路） Grid 3D不太好做 Navigation Mesh must use Convex Polygon, not concave polygon Not support 3D space (直升飞机之类) NavMesh Generation Voxelization Region Segmentation Watershed Algorithm Advanced Features Polygon Flag Tile Off-mesh Link Sparse Voxel Octree Represents flyable 3D space Similar to spatial partitioning 八叉树 Path Finding can be abstracted as shortest path problem in non-directional graph DFS BFS Dijkstra Algorithm A Star Path Smoothing String Pulling (Funnel Algorithm) Steering From Path to Motion Steering Behaviors Seek/Flee Pusue Wander Path Following Flow Field Following Velocity Match Arrive Align Crowd Simulation Crowd Simulation Models Microscopic models Rule-based models Macroscopic models Mesoscopic models RTS游戏中的小兵 Collision Avoidance Force-based Models Velocity-based Models Velocity Obstacle (VO) Reciprocal Velocity Obstacle (RVO) Sensing (Perception) Information Internal Information External Information Static Spatial Information Dynamic Spatial Information Influence Map Game Objects Sensing Simulation Classic Decision Making Algorithms Finite State Machine (forward) Hierarchical Finite State Machine Behavior Tree (forward) Execution node (leaf node) Condition node Action node Success Fail Running Control flow node (internal node) Sequencer 依次执行子节点 Selector 只要完成某几个字节点就行 Parallel 同时执行多个字节点 Decorator 负责杂七杂八的事项 timer looper … Tick a BT 每次都会从Root node开始tick Blackboard ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:7:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Advanced AI Hierarchical Tasks Network (backward) Make a plan like human HTN Framework Sensors Perception World State a subject world view in AI Brain Planner Make a plan (Planning) start from the root task and choose the method satisfying the preconditions in order decompose the method to tasks (for primitive tasks) assume all actions will be succeed, update “world state” in temporary memory. world state has a duplicated copy in planning phase (for primitive tasks) go back and select a new method if precondition is not satisfied repeat steps until no more task needs to be done Plan Runner Update the world state Run plan execute tasks in order stop until all tasks succeed, or one task failed Replan not have a plan the current plan is finished or failed the world state changes via its sensor HTN Domain Hierarchical Tasks Primitive Task Preconditions Action Effects Compound Task methods have priority and precondition Method a chain of sub-tasks can be a primitive task or a compound task conclusion HTN is similar with BT and more high-level faster than BT !hard to design tasks Goal-Oriented Action Planning (backward) Structure Select Goal -\u003e Make Plan -\u003e Execute Sensors World State Goal Set Precondition Priority Goal can be presented as a Collection of States Action Set Precondition Effect Cost Planning check goals based on priority find the first goal which precondition is satisfied compare the target state with world state to find unsatified goal set all unsatisfied states of the goal into a stack check the top unsatisfied state from the stack select an action from action set which could satisfy the chosen state pop the state if it is satisfied by the selected action push action to plan stack check precondition of corresponded action if precondition is not satisfied, push state to stack of unsatisfied states Build States-Action-Cost Graph can be turned into a path planning problem. The graph has direction. Use A* algorithm. Heuristics can be represented with number of unsatisfied states. Node: Combination of states Edge: Action Distance: Cost Plan Runner Conclusion more dynamic decouping goals and behaviors !more expensive !needs a well-represented world state and action effect Monte Carlo Tree Search (backward) simulate millions possible moves and choose the best step Monte Carlo Method node: State A Tree Structured State Space edge: Action Rebuild the state space for each move Simulation Run from the state node according to the Default Policy to produce an outcome Default Policy A meaningful but quick rule or neural network to play the game Evaluation Factors Q: Accumulation of Simulation Results N: Number of simulations Backpropagate Propagate influence of child state back parent state Iteration Steps Selection Always search from the root node. Expandable node select the most urgent “expandable” node has unvisited children nonterminal state Exploitatoin select the child which has high Q/N value Exploration select the child which has low number of visits UCB (Upper Confidence Bounds) balance exploitation and exploration. Expansion one or more new child nodes are added to selected node Simulation Backpropagate The End Condition Computational budget Memory size Computation time Choose the Best Move Max child the highest Q-value Robust child the most visited Max-Robust child both the highest visit count and the highest reward. if none exist, continue simulation Secure child the child which maximises a lower confidence bound(LCB) Conclusion behaves diverse agent makes the decision totally by itself can solve the problem of large search space !hard to design for most real-time games !hard to model for most real-time games Machine Learning Basic Supervised Learning learn from labeled data 分类器 Unsupervised Learning learn from unlabeled data 聚类 Semi-supervised Learning learn from a lot of unlabeled data and very scarece labeled data. 小样本学习 Reinforcement Learning learn from an interaction process with environment Trial-and-error searc","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:7:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Online Gaming Architecture (网络游戏的架构) ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:8:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Challenges Consistency Network Synchronization Reliability Network Latency Drop and Reconnect Security Cheats Accounts Hacked Diversities Cross-Play Rapid iteration Multiple Games Systems Complexities High Concurrency High Availability High Performance ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:8:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Basics Network Protocols OSI Model TCP (Transmission Control Protocol) UDP (User Datagram Protocol) Reliable UDP TCP is Not Time Critical UDP is Unreliable ACK \u0026 Sequence Number ACK, NACK, SEQ, Timeout Automatic Repeaat Request (ARQ) Sliding Window Protocol Stop-and-wait ARQ Go-Back-N ARQ Selective Repeat ARQ Forward Error Correction (FEC) XOR FEC 校验码 Reed-Solomon Codes Clock Synchronization RTT Round-Trip Time RTT vs. Ping ping: transport layer rtt: application layer RTT vs. Latency Network Time Protocol (NTP) Reference clock NTP Algorithm Stream-Based Time Synchronization with Elimination of Higher Order Modes Time Server Stratums Stratum Values Remote Procedure Call(RPC) Interface Definition Language RPC Stubs (票据存根) Stub Compiler Network Topology Original Peer-to-Peer(p2p) p2p with Host Server 自建房间的人 Dedicated Server Game Synchronization Snapshot Sync client sends inputs to server, server simulates the game world and generates game state snapshots, server sends them down to clients, clients updates the display based on the snapshot Snapshot Interpolation Delta Compression Lockstep Sync 帧同步 Deterministic Same input + same execution = same game state 服务器收集所有人的收入，然后同时分发给所有人，每个人根据同样的输入自行模拟，应当得出同样的结果。 game progress depends on slowest player Bucket Sync 设置一个最长时间，超过时间就不等了，直接收集信息并分发。 A good trade-off between Consistency and Interactivity Maintenance The Threshold Deterministic Difficulties Floating Point Numbers need to follow IEEE-754 standard; Fixed-point math; Random Number pseudorandom make sure the random number seed and the generation algorithm the same Tracing and Debugging checksum frame log Lag and Delay use buffer to cache frames Separating game logic from rendering Reconnection Problem Client Game State Snapshots Quick Catch Up Server State Snapshot Optimization Observing 存关键帧，电脑自行模拟 Replay Cheating Issues upload key data checksum, compare checksums among multiplayers server can be considered as a player, too. Difficult to avoid third-party plugin which only access data. State Sync 状态同步 state data, events, control data Server authorizes the game world Clients only upload relevant data Authorized and Replicated Clients Authorized player’s local game client Server authorized server Replicated simulated character in other player’s clien t Dumb Client Problem clients can not do anything until receive server state update Client-side prediction Server reconciliation Ring buffer for inputs Packet Loss server may duplicate user’s last input ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:8:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Advanced Topics Character Movement Replication Interpolation \u0026 Extrapolation Smooth movement Interpolation 内插值 Scenario Characters’ movement Extrapolation 外插值 Estimate Current State by Extrapolation Dead Reckoning 航位推算 estimate future state based on states that have been received Projective Velocity Blending Collision Issues Physics Simulatioin Blending During Collision switch system between physics system and Extrapolation Scenario Player movement uses a realistic physical model Gameplay suffers from latency Blend Scenario of Interpolation and Extrapolation Hit Registration hit registration is making a consensus of all players that whether you’ve actually hit your enemy Client-Side Hit Detection best shooting experience, efficient, unsafe for cheating A Comparison of Hitscan Weapons vs Projectile Weapons A very simple server verification of Hit Event server verification is Very Tricky and Complicated Server-Side Hit Registration Lag Compensation 用上一帧的画面来做hit detection。需要做快照 RewindTime = Current Server Time - Packet Latency - Client View Interpolation Offset Cover Problems Running into Cover Coming out from Cover Hack Startup Frames to Ease Latency Feeling 前摇动画 Local Forecast VFX Impacts 本地先播放动画，再让服务器结算 MMOG Network Architecture MMOG: Massively Multiplayer Online Game. MMORPG, MMOFPS… Game Sub-Systems User Management Matchmaking Trading System Social System Data Storage … MMO Architecture Services of Link Layer Login Server Gateway 隔绝内外网 Lobby Character Server All player data is managed in one system. Trading System Social System Matchmaking Data Storage Distributed Systems Load Balancing Consistent Hashing 一致性哈希 Virtual Server Node in Consistent Hashing Servers Management Service Discovery Registry Query and Watch Health Check Bandwidth Optimization Calculate Bandwidth Data Compression Object Relevance Static Zones Area of Interest (AOI) Direct Range-Query Spatial-Grid Orthogonal Linked-list 十字链表法 Potentially Visible Set (PVS) Varying Update Frequency by Player Position Anti-Cheat Cheating ways Game code modifications Obfuscating Memory Executable Packers 加壳 内存混淆 Verifying Local Files by Hashing System software invoke Valve Anti-Cheat and Easy Anti-Cheat Detecting Known Cheat Program 对商业化外挂比较好 Net packet interception Encrypt the Network Traffic use asym encryption to distribute sym key. transfer data using sym encryption Symmetric-key algorithm Asymmetric encryption … AI Cheat Rich AI Middlewares Real-Time Object Detection. YOLO v7… Skeleton based Action Recognition Statistic-based System Build a Scalable World Scalable Game Servers Combination of zoning, instancing, and prelication Zoning 分区 Seamless Zones Zone Border Border width \u003e= max AOI radius Active Entity Ghost Entity Cross Border Instancing Replication ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:8:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Advanced Topics ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:9:0","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Data-Oriented Programming and Job System Basics of Parallel Programming Types of Multitasking Preemptive Multitasking 抢占式多任务 Non-preemptive Multitasking Thread Context Switch Parallel Problems in Parallel Computing Embarrassingly Parallel Problem (or Perfectly Parallel) Little or no dependency or need for communication between parallel tasks Non-embarrassingly Parallel Problem Communication is needed between parallel tasks Data Race in Parallel Programming Blocking Algorithm lock may cause dead lock Locking Primitives make a critical section for shared resource access Atomic Operation Lock-free Programming Lock Free vs Wait Free lock free will waste cpu usage Problem of Memory Reordering Compiler Reordering Optimizations compilers and CPUs often modify the execution order of instructions to optimize performance. execution order of instructions is very critical. Parallel Framework of Game Engine Fixed Multi-thread Render Thread Simulation Thread Logic Thread Network Thread cons: not balanced workload; unscalable Thread Fork-Join use a thread pool to prevent frequent thread creation/destruction cons: still not very balanced Task Graph a directed acyclic graph node: Task edge: Dependency building task graph by links too static, not dynamic Job System Coroutine Coroutine vs. Thread Coroutine scheduled by programmers to be executed within a thread context switch is faster without kernel switch Thread scheduled by os resides in a process context switch is costly with kernel switch Stackful Coroutine Stackless Coroutine Fiber-based Job Systesm fiber is like coroutine except that fiber is scheduled by a scheduler One work thread for one core Job Scheduler Global Job outside threads add globaljobs to global job queue; work thread gets global job from global queue; LIFO and FIFO Mode 一般会用LIFO Mode，类似dependency关系 Job Dependency if job yields, add it to waiting job and add necessory jobs to work thread. after finishing necessory jobs, move the job which yields back to work thread Job Stealing if some work threads have no job, they will steal jobs from busy threads Data-Oriented Programming(DOP) Principle of Locality Spatial Locality Single Instruction Multiple Data (SIMD) LRU(Least Recently Used) Cache Line Cache Miss Row-major order Column-major order Keep Code and Data Tight in Memory Performance-Sensitive Programming Reducing Order Dependency False Sharing in Cache Line Rranch Prediction Existential Processing Performance-Sensitive Data Arrangement Array of Structure vs. Structure of Array if we want to read the position of all particles, SOA has better performance Entity Component System (ECS) Entity an ID refer to a set of components Componet the data to be processed by systems, no logic at all System where the logic happens, read/write component data Unity Data-Oriented Tech Stack (DOTS) ECS Archetype Type of Game Objects Entities are grouped into archetypes Data Layout in Archetype same components in an archetype are packed tightly into chunks for cache friendliness C# Job System Burst Compiler Unreal Mass Framework Entity Component Fragments and tags Systems Processors ConfigureQuery Execute :ATTACH: ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:9:1","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Dynamic Global Illumination and Lumen Global Illumination Monte Carlo Integration Sampling is the Key Uniform Sampling 均一采样 Probability Distribution Function (PDF) Importance Sampling Reflective Shadow Maps (RSM) Cone Tracing with RSM Acceleration with Low-Res Indirect Illumination Light Propagation Volumes (LPV) Radiance Propagation Sparse Voxel Octree for Real-time GLobal Illumination (SVOGI) Collect Surface Voxel Shading with Cone Tracing in Voxel Tree Voxelization Based Global Illumination (VXGI) Store the voxel data in clipmaps 采用LOD的方法，离自己50米内用高精度存个图，离自己50到100米内用中精度存，100米外用低精度存，最后三个图打包起来用 Voxel Update and Toroidal Addressing Voxelization for Opacity Accumulate Voxel Radiance and Opacity along the Path Problems Incorrect Occlusion (opacity) Light Leaking when occlusion wall is much smaller than voxel size Screen Space Global Illumination (SSGI) Radiance Sampling in Screen Space Linear Raymarching Hierarchical Tracing 用hierarchical z的方法，如果光线不被上层阻挡，就直接射向下一层，直至被某层阻挡后，回到上一层去一个个判断 Ray Reuse among Neighbor Pixels Cone Tracing with Mipmap Filtering Lumen Ray trace is slow Sampling is hard Low-res filtered scene space probes lit full pixels Fast Ray Trace in Any Hardware Signed Distance Field (SDF) Per-Mesh SDF SDF for Thin Meshes Ray Tracing with SDF Cone Tracing with SDF Sparse Mesh SDF Mesh SDF LoD Ray Tracing with Global SDF Global SDF inaccurate near the start of the zone, but fast Cache Global SDF around Camera Radiance Injection and Caching Mesh card - orthogonal camera on 6-Axis Aligned directions 以相机的视界为基准 Generate Surface Cache Lighing Cache Pipeline 用时序上上一帧的直接光照计算当前帧的间接光照 Voxel Clipmap for RAdiance Caching of the Whole Scene Build Voxel Faces by Short Ray Cast Inject Light into clipmap Indirect Lighting Combine Lighting finalLighting = (directLighting + indirectLighting) * Diffuse_Lambert(Albedo) +Emissive; Build a lot of Probes with DIfferent Kinds Screen Space Probe Octahedron mapping Screen Probe Placement 16*16采样无效的话，就细化Tile8*8，4*4 Screen Probe Atlas Screen Probe Jitter Importance Sampling Accumulate Normal Distribution Nearby Structured Importance Sampling Fix Budget Importance Sampling based on Lighting and BRDF Denoising and Spatial Probe Filtering Denoise Gather Radiance from neighbors Clamp Distance Mismatching World Space Probes and Ray Connecting World Space Radiance Cache Connecting rays connect screen probe ray and world probe ray Placement and caching Shading Full Pixels with Screen Space Probes Convert Probe Radiance to 3rd order Spherical Harmonic Overall, Performance and Result ATTACH ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:9:2","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["游戏"],"content":"Nanite GPU Driven Pipeline in Assassins Creed Mesh Cluster Rendering GPU Instance Culling GPU Cluster Culling Index Buffer Compaction Codec Triangle Visibility in Cube: Backface Culling Occlusion Culling for Camera and Shadow Occlusion Depth Generation Two-Phase Occlusion Culling 1st phase cull objects\u0026 clusters using last frame’s depth pyramid. render visible objects 2nd phase refresh depth pyramid. Test culled objects\u0026 clusters. Render false negatives Fast Occlusion for Shadow Camera Depth Reprojection for Shadow Culling Visiblity Buffer a cache-friendly approach to deferred shading Filling for each pixel in screen: pack (alpha masked bit, drawID, primitiveID) into one 32-bit UINT write that into a screen-sized buffer Shading for each pixel in screen: get drawID/triangleID at pixel pos load data for the 3 vertices from the VB compute triangle gradients interpolate vertex attributes at pixel pos using gradients Visibility Buffer + Deferred Shading Correct Texture Mipmap with Gradient Virtual Geometry - Nanite 适合静态事物，不适合动态人物、物品 Overview Virtual Texture Voxels? no Subdivision Surface? no Maps-based Method? no Point Cloud? no Foundation of Computer Graphics - Triangles! yes Geometry Represent Cluster-based LoD View Dependent LoD Transitions 近处三角形多，远处三角形少 Naive Solution CLuster LoD Hierarchy Simple Streaming Idea LoD Cracks the cross region of different LoD Locked Boundaries (bad) Nanite Solution - CLuster Group 聚合之前的三角形成group，在group里重新划分出较大的三角形。三角形的边界和之前的边界可能会不同 DAG for Cluster Groups (not tree) detail of simplification - QEM Runtime LoD Selection LoD Selection in Parallel Core Equation of Parallel LoD Selection for Cluster Groups when can we LoD cull a cluster? Render: ParentError \u003e threshold \u0026\u0026 ClusterError \u003c= threshold Cull: ParentError \u003c= threhold || ClusterError \u003e threshold if parent is already precise enough, no need to check child. ParentError \u003c= threshold tree based on ParentError, not ClusterError Isolated LoD Selection for Each Cluster Group BVH and runtime LoD Build BVH for Acceleratio of LoD Selection balance BVH for 4 nodes, every node is a LoD cluster group Rendering Software and Hardware Rasterization Scanline Software Rasterizer Depth Test Visibility Buffer Imposters for Tiny Instances Deferred Materials Shading Efficiency hardware depth test; convert material id to depth value Material Sorting with Tile-Bsed Rendering Material Classify Tile-based Acceleration Virtual Shadow Map A Cached Shadow System Sample Distribution Shadow Maps Virtual Shadow Mapping 16k * 16k virtual shadow map for each light; 相机和光源不动就不用更新，动了才更新 Shadow Page Allocation Shadow Page Cache Invalidation Streaming and Compression Memory representation vertex quantization and encoding Disk representation hardware LZ decompression for better compression transcode on the GPU ","date":"2022-10-24","objectID":"/games104%E7%AC%94%E8%AE%B0/:9:3","tags":["游戏引擎","game-engine","游戏开发"],"title":"GAMES104笔记","uri":"/games104%E7%AC%94%E8%AE%B0/"},{"categories":["哲学"],"content":"（老文补档） 以分类观分类： 分类的特性，趋向多中心化，由无生有，由一生多，由多生众。如果从探索物质世界基本构成的角度来看，从生命体到系统，到组织，到细胞，到分子，到原子，到质子，到电子，到夸克等更多微粒子，分类无疑是还原论的思想基础，由整体至各部分之和。那么分类的利弊则可以大似从还原论的利弊来考虑：去中心化的同时多中心化，失去对主要矛盾的把握，增大全局统筹的成本，是一个理应自下而上进行推演的架构。 因此，需要恰当把握分类的度，既要避免在自上而下地处理主要矛盾的过程中因为细节问题停滞下来，亦要避免在自下而上地进行整合中丧失对主要矛盾(初始目标)的识别。 在科研中 分类的思想不仅在生物学发展的进程中起到了至关重要的作用，也可以说是近现代自然科学得以稳步推进的重要原因。想起陈平教授曾提出做科研最关键就是要学会分类，找出自己所了解领域的交界处或边界，选取一个合适的角度，一个恰当的剖面，然后深入下去。在这里，那个合适的角度、剖面便是被分出来的一个新类，而作出区分的人便也成为了这个新类的开创者。有疑问的一点是，从现在的角度来看，分类对于科研究竟是起到了推动作用，还是减缓了主要领域的推进速度。可以想见的是，在这里假如说一个新领域的开拓者的身份意味着无法估量的利益，那么分类事实上符合了人更好更快谋求自己利益的幻想。那么这种被自然强力驱动的行为，对于社会整体的科研是否有益？以当下结果来论，分类是显而易见地在符合各形各色人的利益追求下充分发挥了他们的科研价值。但如果存在一种情况，那里的人一心科研，不追名逐利，那分类是否依然有助于主要领域的推进？这或许需要考虑所谓的无用科研中的亮点，那些无用科研给社会带来的冗余度。以工程角度来讲，考虑到阻止人追名逐利需要付出的社会成本极大，同时换来的对主要领域科研的推进提升有限，分类在科研中的应用无疑是现实情况下更为合理的选择。 在社会心理中 考虑到如今身份政治横行，不得不开始审视分类（区分）在社会实践中究竟意味着什么。与华夏大一统的文化区别开来，现代对多元化的诉求本质上源自强有力个人诉求的盛行，为什么要多元化，因为多元化带来多点权威，分布式的权威，而不再是曾经唯一性的中央集中式权威。对权威的分化带来了权力的分散，而权力和资本在多数情境下则是可以互相兑换的资源。那么可以想见，分类势必是朝向多中心化发展，越分越多，从社会只有一个单一权威主体到存在散布式的多权威聚类。基于分类在科研情境下的特性分析，社会心理中的分类同样会带来种族、民族、文化、宗教等各类基于世界观的可区分概念的进一步分裂。同时考虑到社会心理中的分类需要有多个元素才能维持其作为一类的现实存在，社会心理中的分类会带来中小型，小微型聚类，但相对的这些聚类的力量也远弱于大型聚类的力量。考虑到稀缺在社会的资本因素中的可兑现潜力，这些小型聚类虽缺乏事实上的力量，却具备了理论上的高吸引力。由于不断分类会渐渐地使得结构向自下而上演变，不断分类确实在理论上有利于每个个体去获取其价值的局部最大化，但这也只能是局部最大化，因为在个体做价值追求行动（最速降线优化）时，其行动具有了固定的方向且难以被该个体识别并更改，换言之，变得盲目，宏观上的多元化考虑导向了个体的单一价值追求。这是群体层面上的多元，却是个体层面上的单一。当然这是合理的，个体毕竟是另一个层面上的群体，主要矛盾理应是非多元的。 如果个体要尝试寻求其价值的全局最大化，那其必须做的便是在起初谨慎分类，慎重选择方向，同时在后续向着固定方向追求价值实现时保持对其他分类的恰当关注。当然，这仅有可能发生在为时尚早时，想象一幅沿着最速降线前进的优化曲线图，沿着某一方向前进越久时，该个体距离该山峰(局部最大值)的邻侧山脉也就越远，能更好地把握邻侧山峰的高度，但把握不了远方的山峰。假设分类过少，则可能的情况是，虽然存在一个主要矛盾，但同时多数个体都带着或多或少的其他压力，其中对于部分群体来说，则可能是他们的主要利益被压制了。该情况下，此整体缺乏调整的有效动力及现实基础。通过实现整体的价值追求，是可以有效提高个体的生存底线并为个体提供更广阔的视野，但必须要注意的一点是所谓的整体也不过是更高一层整体的局部。因此，这仍然只能追求局部最优，而达不到全局最优，但此时局部最优以及所付出的成本都要优于过度分类的情况。 回到身份政治的话题上，当一个整体被不断分化后，当一个中心变成了多中心，那势必会带来中心力量的衰弱。换言之，通过分类行为，可以理论上消解一个整体的主要矛盾，取而代之的则是诸多或轻或重的次要矛盾成为了主要关注点。在身份政治之中，即表现为身份议题取代了阶级议题，取代了最广大人群的实际利益问题。大中心中的中上层边缘分子夺权组建了小中心，那么任何中心中的底层分子又该如何呢。如此说来，分类这一行为确实有其对整体目标有利之处，能推动整体向着目标前进，但分类本质上是趋向消解整体主要矛盾的，也意味着解构掉整体。不受限的分类不一定会回到完全自由的无组织状态，但一定会回到原始的部落状态，可谓之秩序的衰弱。联系到热力学第二定理，一个封闭系统存在熵增倾向，那么这也就能很好地解释人对分类的趋向性了，也正因此，必须要限制人们在不恰当的领域进行过度的分类。当然，我们这种对于生存的需求，对于熵减的理性向往事实上是这个假如封闭的世界整体熵增的一部分。 联系新闻中从跨性别认同到跨种族认同（人类到人鱼的那种）的发展，可以思考为何否定自身身体可以成为该个体诉诸自身利益需求的手段？以精神分析观之，否定自身作为一个整体的存在，是在”自杀“，是所谓的死本能，并非现实的自杀，而是在解构自身作为人的理念存在。同时，所谓的生本能亦发挥着作用，逆用孔夫子的“未知生，焉知死”，改为未知死，焉知生，一个已经定型的概念要如何在不解构自身的情况下发展出新的未来。其便是通过整体概念的瓦解，将自身打碎以待后面自下而上的重组，换取自身在流动性中获得的广阔可能性以及空间，向死而生说的就是如此，未来存在于向着死的路上，但要控制好分类，毕竟瓦解整体是为了能够更好地重组，而不是就此凋零。 在算法中 在计算机专业中也存在着这么一种类似分类学在生物学中地位的思想，分治(divide and conquer)。分治意为将一个大问题分为诸多与大问题性质相似的小问题，通过对小问题求解，然后汇总小问题的解来得到大问题的答案。基于我的了解来说，分治与上述的分类略有区别，分治所划分出来的小问题本质上是和大问题性质相似的，换言之，并不会消解问题的主要矛盾，而只是缩小整体的规模。当然也存在其他性质并不一定相似的小问题，但最终在进行自下而上的整合时，是向着大问题的主要矛盾前进的，因此，依然视之为与大问题相似，这个分治中的自下而上的整合机制或许就是那个确保了分类可以为整体所用的关键，但是不得不说，分治的一切都是由顶层规划起，换言之，其所分裂出来的小问题皆是自上而下形成的，这已经偏离了自下而上分类的本质了。因此，或许分治重要的并非是其整合机制，而是其分(divide)成小问题的机制极其重要。如何给整体进行恰当地划分，以为将来更好地整合，功在分前。 分治与分类本质上并非同一概念，但是借助分治的概念，可以直观形象地了解为什么不分类就很可能会在自上而下地处理矛盾中停滞下来。分类是人类的工程思维，为解决问题而生，正是因为这种概念本身是导向否定整体的，所以这种否定高于自身的整体的方法才蕴含了解决问题的可能性。 在个人实践中 并非谈及琐碎的个人如何应用分类思想整理物件，而是个人如何利用分类的视角来剖析世界，构建世界观。在自我并没有一个清晰的世界观的时候，换句话说，孩童时期。一个个体是不需要特意去辩识自我在哪里，自我有一个，自我是否存在矛盾。在那个时期，自然也难以开展如同这篇文章的反思，孩童时期的个体，可以说是个完整的个体，不曾习得部分与部分之间的区别，当然那也是一个个体最为孱弱的时期。多元化的主要好处在于面对未知危险时拥有更多的可能性，有更大的可能刚好发展了一项专业能力来处理灾难。随着孩童逐渐识别自身的各个部分，各种功能，孩童开始拥有了基础的行动能力，但是这还不够，这时候孩子便在不断地识别这个世界，借用计算机视觉的概念，也可以称为为这个世界做模式识别，做分类。 就这样，随着孩子的分类逐渐进行，孩子开始形成观念上的自我并能将自我与外界区分开，这可以说是孩子旧有世界的一次死去，是世界和他作为一个整体的割裂，但他从此便作为单独的个体存在了。在这个过程中，分类帮助孩子完成了从无到有的观念建立。随着一步步长大，在经历过了解周围人并非绕着自己转的NPC后，在意识到每个人都有自己的观念自我后，这个个体才达到了作为个体知道其他个体与自身的割裂，并能与其他个体形成社会这一阶段。 在我的青少年时期，我便痴迷于进行如此的思考，后又在高中时碰上一位良师，让我形成了一个关于\"视角“的清晰理论。想象自我并非处在这具身体里，而是在身后或者在脑的后斜上方一定距离处观察着这具身体。在当初的实践中，这种体验让我学会了平淡面对世界，忘记自己的欲望，理性地思考并付诸行动。后来我在大学的心理学文章中了解到这种感受被称为\"疏离感\"，是属于工业时代下的人的异化。如果遵从这个理论，那么分类在此处便表现出了字面上的消极作用，工业时代异化了人，其表现为部分人的获得性疏离感。然而从分类的本质，解决问题出发，正是人在其生活实践中，逐渐意识到了身体的过重负担，才产生了通过逃离身体来解救自我的“疏离”。尽管这种感受被描述为消极的，但作为个体来说，我意识到的是这种思维背后强大的解决问题的能力，解构并建构。通过有意识地训练，便可以根据不同的应用场合采取恰当的思考行为模式而不遭受自身的抵抗或者说本我的抵抗。当然，恰如之前所讨论的，对","date":"2022-07-05","objectID":"/%E4%BB%A5%E5%8A%9F%E5%88%A9%E4%B8%BB%E4%B9%89%E8%A7%82%E5%88%86%E7%B1%BB%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%83%85%E5%A2%83%E4%B8%8B%E7%9A%84%E5%B7%AE%E5%88%AB/:0:0","tags":["分类","还原论"],"title":"以功利主义观分类在不同情境下的差别","uri":"/%E4%BB%A5%E5%8A%9F%E5%88%A9%E4%B8%BB%E4%B9%89%E8%A7%82%E5%88%86%E7%B1%BB%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%83%85%E5%A2%83%E4%B8%8B%E7%9A%84%E5%B7%AE%E5%88%AB/"},{"categories":null,"content":"Design Pattern 设计模式 the relationship between design patterns ","date":"2022-05-23","objectID":"/design-pattern/:1:0","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":null,"content":"Creational Patterns Factory Pattern 工厂模式 Abstract Factory Pattern Singleton Pattern Builder Pattern Prototype Pattern ","date":"2022-05-23","objectID":"/design-pattern/:1:1","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":null,"content":"Structural Patterns Adapter Pattern Bridge Pattern Filter、Criteria Pattern Composite Pattern Decorator Pattern Facade Pattern Flyweight Pattern Proxy Pattern ","date":"2022-05-23","objectID":"/design-pattern/:1:2","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":null,"content":"Behavioral Patterns Chain of Responsibility Pattern Command Pattern Interpreter Pattern Iterator Pattern Mediator Pattern Memento Pattern Observer Pattern State Pattern Null Object Pattern Strategy Pattern Template Pattern Visitor Pattern ","date":"2022-05-23","objectID":"/design-pattern/:1:3","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":null,"content":"J2EE Patterns MVC Pattern Business Delegate Pattern Composite Entity Pattern Data Access Object Pattern Front Controller Pattern Intercepting Filter Pattern Service Locator Pattern Transfer Object Pattern ","date":"2022-05-23","objectID":"/design-pattern/:1:4","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":null,"content":"Principles Open Close Principle 开闭原则：对扩展开放，对修改关闭。在程序需要扩展时，不能去修改原有代码，应当实现类似热插拔的效果。 Liskov Substitution Principle 里氏代换原则：任何基类可以出现的地方，子类一定可以出现。只有当派生类可以替换掉基类，且软件的功能不受影响时，基类才能真正被复用。 Dependence Inversion Principle 依赖倒转原则：针对接口编程，依赖于抽象而不依赖于具体。 Interface Segregation Principle 接口隔离原则：使用多个隔离接口，比使用单个接口要好。降低类之间的耦合度，降低依赖。 Demeter Principle 迪米特法则（最少知道原则）：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 Composite reuse Principle 合成复用原则：尽量使用合成/聚合的方式，而不是继承。 ","date":"2022-05-23","objectID":"/design-pattern/:1:5","tags":["design-pattern"],"title":"Design Pattern","uri":"/design-pattern/"},{"categories":[],"content":"Hi there! ","date":"2022-03-24","objectID":"/about/:0:0","tags":[],"title":"About","uri":"/about/"},{"categories":["服务器"],"content":"Tags: #Linux #command Links: Linux常用操作 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:0:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"1.1 Linux系统的文件结构 /bin 二进制文件，系统常规命令 /boot 系统启动分区，系统启动时读取的文件 /dev 设备文件 /etc 大多数配置文件 /home 普通用户的家目录 /lib 32位函数库 /lib64 64位库 /media 手动临时挂载点 /mnt 手动临时挂载点 /opt 第三方软件安装位置 /proc 进程信息及硬件信息 /root 临时设备的默认挂载点 /sbin 系统管理命令 /srv 数据 /var 数据 /sys 内核相关信息 /tmp 临时文件 /usr 用户相关设定 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:1:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"1.2 Linux系统命令行的含义 示例：root@app00:~# root //用户名，root为超级用户 @ //分隔符 app00 //主机名称 ~ //当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:/bin# ，当前位置在bin目录下） # //表示当前用户是超级用户，普通用户为$，例如：（\"yao@app00:/root$\" ，表示使用用户\"yao\"访问/root文件夹） ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:2:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"1.3 命令的组成 示例：命令 参数名 参数值 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:3:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"2.1 重启系统 (1)立刻关机 shutdown -h now 或者 poweroff (2)两分钟后关机 shutdown -h 2 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:4:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"2.2 关闭系统 (1)立刻重启 shutdown -r now 或者 reboot (2)两分钟后重启 shutdown -r 2 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:5:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"2.3 帮助命令（help） ifconfig --help //查看 ifconfig 命令的用法 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:6:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"2.4 命令说明书（man） man shutdown //打开命令说明后，可按\"q\"键退出 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:7:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"2.5 切换用户（su） su yao //切换为用户\"yao\",输入后回车需要输入该用户的密码 exit //退出当前用户 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:8:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.1 切换目录（cd） cd / //切换到根目录 cd /bin //切换到根目录下的bin目录 cd ../ //切换到上一级目录 或者使用命令：cd .. cd ~ //切换到home目录 cd - //切换到上次访问的目录 cd xx(文件夹名) //切换到本目录下的名为xx的文件目录，如果目录不存在报错 cd /xxx/xx/x //可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:9:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.2 查看目录（ls） ls //查看当前目录下的所有目录和文件 ls -a //查看当前目录下的所有目录和文件（包括隐藏的文件） ls -l //列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令\"ll\"效果一样 ls /bin //查看指定目录下的所有目录和文件 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:10:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.3 创建目录（mkdir） mkdir tools //在当前目录下创建一个名为tools的目录 mkdir /bin/tools //在指定目录下创建一个名为tools的目录 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:11:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.3 删除目录与文件（rm） rm 文件名 //删除当前目录下的文件 rm -f 文件名 //删除当前目录的的文件（不询问） rm -r 文件夹名 //递归删除当前目录下此名的目录 rm -rf 文件夹名 //递归删除当前目录下此名的目录（不询问） rm -rf * //将当前目录下的所有目录和文件全部删除 rm -rf /* //将根目录下的所有文件全部删除【慎用！相当于格式化系统】 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:12:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.4 修改目录（mv） mv 当前目录名 新目录名 //修改目录名，同样适用与文件操作 mv /usr/tmp/tool /opt //将/usr/tmp目录下的tool目录剪切到 /opt目录下面 mv -r /usr/tmp/tool /opt //递归剪切目录中所有文件和文件夹 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:13:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.5 拷贝目录（cp） cp /usr/tmp/tool /opt //将/usr/tmp目录下的tool目录复制到 /opt目录下面 cp -r /usr/tmp/tool /opt //递归剪复制目录中所有文件和文件夹 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:14:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.6 搜索目录（find） find /bin -name 'a*' //查找/bin目录下的所有以a开头的文件或者目录 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:15:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"3.7 查看当前目录（pwd） pwd //显示当前位置路径 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:16:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"4.1 新增文件（touch） touch a.txt //在当前目录下创建名为a的txt文件（文件不存在），如果文件存在，将文件时间属性修改为当前系统时间 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:17:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"4.2 删除文件（rm） rm 文件名 //删除当前目录下的文件 rm -f 文件名 //删除当前目录的的文件（不询问） ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:18:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"4.3 编辑文件（vi、vim） vi 文件名 //打开需要编辑的文件 --进入后，操作界面有三种模式：命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode） 命令模式 -刚进入文件就是命令模式，通过方向键控制光标位置， -使用命令\"dd\"删除当前整行 -使用命令\"/字段\"进行查找 -按\"i\"在光标所在字符前开始插入 -按\"a\"在光标所在字符后开始插入 -按\"o\"在光标所在行的下面另起一新行插入 -按\"：\"进入底行模式 插入模式 -此时可以对文件内容进行编辑，左下角会显示 \"-- 插入 --\"\" -按\"ESC\"进入底行模式 底行模式 -退出编辑： :q -强制退出： :q! -保存并退出： :wq ## 操作步骤示例 ## 1.保存文件：按\"ESC\" -\u003e 输入\":\" -\u003e 输入\"wq\",回车 //保存并退出编辑 2.取消操作：按\"ESC\" -\u003e 输入\":\" -\u003e 输入\"q!\",回车 //撤销本次修改并退出编辑 ## 补充 ## vim +10 filename.txt //打开文件并跳到第10行 vim -R /etc/passwd //以只读模式打开文件 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:19:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"4.4 查看文件 cat a.txt //查看文件最后一屏内容 less a.txt //PgUp向上翻页，PgDn向下翻页，\"q\"退出查看 more a.txt //显示百分比，回车查看下一行，空格查看下一页，\"q\"退出查看 tail -100 a.txt //查看文件的后100行，\"Ctrl+C\"退出查看 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:20:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"5.1 权限说明 文件权限简介：'r' 代表可读（4），'w' 代表可写（2），'x' 代表执行权限（1），括号内代表\"8421法\" ##文件权限信息示例：-rwxrw-r-- -第一位：'-'就代表是文件，'d'代表是文件夹 -第一组三位：拥有者的权限 -第二组三位：拥有者所在的组，组员的权限 -第三组三位：代表的是其他用户的权限 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:21:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"5.2 文件权限 普通授权 chmod +x a.txt 8421法 chmod 777 a.txt //1+2+4=7，\"7\"说明授予所有权限 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:22:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"6.1 说明 .zip、.rar //windows系统中压缩文件的扩展名 .tar //Linux中打包文件的扩展名 .gz //Linux中压缩文件的扩展名 .tar.gz //Linux中打包并压缩文件的扩展名 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:23:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"6.2 打包文件 tar -zcvf 打包压缩后的文件名 要打包的文件 参数说明：z：调用gzip压缩命令进行压缩; c：打包文件; v：显示运行过程; f：指定文件名; 示例： tar -zcvf a.tar file1 file2,... //多个文件压缩打包 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:24:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"6.3 解压文件 tar -zxvf a.tar //解包至当前目录 tar -zxvf a.tar -C /usr------ //指定解压的位置 unzip test.zip //解压*.zip文件 unzip -l test.zip //查看*.zip文件的内容 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:25:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.1 find find . -name \"*.c\" //将目前目录及其子目录下所有延伸档名是 c 的文件列出来 find . -type f //将目前目录其其下子目录中所有一般文件列出 find . -ctime -20 //将目前目录及其子目录下所有最近 20 天内更新过的文件列出 find /var/log -type f -mtime +7 -ok rm {} \\; //查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们 find . -type f -perm 644 -exec ls -l {} \\; //查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件 find / -type f -size 0 -exec ls -l {} \\; //为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:26:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.2 whereis whereis ls //将和ls文件相关的文件都查找出来 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:27:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.3 which 说明：which指令会在环境变量$PATH设置的目录里查找符合条件的文件。 which bash //查看指令\"bash\"的绝对路径 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:28:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.4 sudo 说明：sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。需要输入自己账户密码。 使用权限：在 /etc/sudoers 中有出现的使用者 sudo -l //列出目前的权限 $ sudo -u yao vi ~www/index.html //以 yao 用户身份编辑 home 目录下www目录中的 index.html 文件 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:29:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.5 grep grep -i \"the\" demo_file //在文件中查找字符串(不区分大小写) grep -A 3 -i \"example\" demo_text //输出成功匹配的行，以及该行之后的三行 grep -r \"ramesh\" * //在一个文件夹中递归查询包含指定字符串的文件 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:30:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.6 service 说明：service命令用于运行System V init脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径 service ssh status //查看服务状态 service --status-all //查看所有服务状态 service ssh restart //重启服务 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:31:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.7 free 说明：这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况 free -g //以G为单位输出内存的使用量，-g为GB，-m为MB，-k为KB，-b为字节 free -t //查看所有内存的汇总 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:32:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.8 top top //显示当前系统中占用资源最多的一些进程, shift+m 按照内存大小查看 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:33:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.9 df 说明：显示文件系统的磁盘使用情况 df -h //一种易看的显示 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:34:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.10 mount mount /dev/sdb1 /u01 //挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上 dev/sdb1 /u01 ext2 defaults 0 2 //添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:35:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.11 uname 说明：uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息 uname -a ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:36:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.12 yum 说明：安装插件命令 yum install httpd //使用yum安装apache yum update httpd //更新apache yum remove httpd //卸载/删除apache ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:37:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.13 rpm 说明：插件安装命令 rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm //使用rpm文件安装apache rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm //使用rpm更新apache rpm -ev httpd //卸载/删除apache ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:38:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.14 date date -s \"01/31/2010 23:59:53\" ///设置系统时间 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:39:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.15 wget 说明：使用wget从网上下载软件、音乐、视频 示例：wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz //下载文件并以指定的文件名保存文件 wget -O nagios.tar.gz http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:40:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.16 ftp ftp IP/hostname //访问ftp服务器 mls *.html - //显示远程主机上文件列表 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:41:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"7.17 scp scp /opt/data.txt 192.168.1.101:/opt/ //将本地opt目录下的data文件发送到192.168.1.101服务器的opt目录下 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:42:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.1 防火墙操作 service iptables status //查看iptables服务的状态 service iptables start //开启iptables服务 service iptables stop //停止iptables服务 service iptables restart //重启iptables服务 chkconfig iptables off //关闭iptables服务的开机自启动 chkconfig iptables on //开启iptables服务的开机自启动 ##centos7 防火墙操作 systemctl status firewalld.service //查看防火墙状态 systemctl stop firewalld.service //关闭运行的防火墙 systemctl disable firewalld.service //永久禁止防火墙服务 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:43:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.2 修改主机名（CentOS 7） hostnamectl set-hostname 主机名 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:44:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.3 查看网络 ifconfig ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:45:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.4 修改IP 修改网络配置文件，文件地址：/etc/sysconfig/network-scripts/ifcfg-eth0 ------------------------------------------------ 主要修改以下配置： TYPE=Ethernet //网络类型 BOOTPROTO=static //静态IP DEVICE=ens00 //网卡名 IPADDR=192.168.1.100 //设置的IP NETMASK=255.255.255.0 //子网掩码 GATEWAY=192.168.1.1 //网关 DNS1=192.168.1.1 //DNS DNS2=8.8.8.8 //备用DNS ONBOOT=yes //系统启动时启动此设置 ------------------------------------------------- 修改保存以后使用命令重启网卡：service network restart ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:46:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.5 配置映射 修改文件： vi /etc/hosts 在文件最后添加映射地址，示例如下： 192.168.1.101 node1 192.168.1.102 node2 192.168.1.103 node3 配置好以后保存退出，输入命令：ping node1 ，可见实际 ping 的是 192.168.1.101。 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:47:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.6 查看进程 ps -ef //查看所有正在运行的进程 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:48:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.7 结束进程 kill pid //杀死该pid的进程 kill -9 pid //强制杀死该进程 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:49:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.8 查看链接 ping IP //查看与此IP地址的连接情况 netstat -an //查看当前系统端口 netstat -an | grep 8080 //查看指定端口 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:50:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.9 快速清屏 ctrl+l //清屏，往上翻可以查看历史操作 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:51:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"8.10 远程主机 ssh IP //远程主机，需要输入用户名和密码 ","date":"2022-03-23","objectID":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:52:0","tags":["Linux"],"title":"Linux常用操作","uri":"/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["服务器"],"content":"Tags: #nginx #反向代理 #nginx Links: nginx反向代理(端口转发) [[nginx]]可以在监听一个端口时，将消息按配置文件转发至其他内部端口，以实现多个应用部署在同一个端口上。 server { listen 80; #打算使用的对外统一端口 server_name localhost; #外界可以访问的域名 root /usr/share/nginx/html; #主页面的路径 index index.html; #主页面的名字 #path是域名下的路径 location /path { proxy_pass http://localhost:8080; #代理服务器，比如动态应用程序站点 ...(proxy_set_header); #重写头信息并将之一并转发到代理服务器，以确保代理服务器获得正确的发送方的信息 } } 以下是一个完整的代码示例： server { listen 80 default_server; listen [::]:80 default_server; server_name localhost; root /usr/share/nginx/html/; index index.html; location /path { add_header Cache-Control no-cache; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_connect_timeout 30s; proxy_pass http://localhost:8080; } error_page 404 /404.html; location = /404.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } ","date":"2022-03-23","objectID":"/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/:0:0","tags":["nginx","反向代理"],"title":"nginx反向代理(端口转发)","uri":"/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"categories":["编程"],"content":"Tags: #python #微信公众号 #自动回复 Links: [[Python下web.py使用ssl加密]], [[Python下web.py的环境部署]], [[可点击式文字菜单]] Python实现开发模式下公众号自动回复 ","date":"2022-03-23","objectID":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/:0:0","tags":["Python","微信公众号"],"title":"Python实现开发模式下公众号自动回复","uri":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/"},{"categories":["编程"],"content":"关注公众号自动回复 如果一个用户关注了一个公众号，公众号后台会收到对应的XML消息。 \u003cxml\u003e \u003cToUserName\u003e\u003c![CDATA[公众号]]\u003e\u003c/ToUserName\u003e \u003cFromUserName\u003e\u003c![CDATA[粉丝号]]\u003e\u003c/FromUserName\u003e \u003cCreateTime\u003e123456789\u003c/CreateTime\u003e \u003cMsgType\u003e\u003c![CDATA[event]]\u003e\u003c/MsgType\u003e \u003cEvent\u003e\u003c![CDATA[subscribe]]\u003e\u003c/Event\u003e \u003c/xml\u003e 以下是参数介绍: 因此，我们可以首先解析这个XML，获得MsgType为event，然后判断该event是否为\"subscribe\"，如果是，则进行回复消息。 handle.py中对应自动回复关注: class Handle(object): def GET(self): ... def POST(self): ... if recMsg.MsgType == 'event': if recMsg.Event == 'subscribe': content = u\"欢迎关注\".encode('utf-8') replyMsg = reply.TextMsg(toUser, fromUser, content) return replyMsg.send() ","date":"2022-03-23","objectID":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/:1:0","tags":["Python","微信公众号"],"title":"Python实现开发模式下公众号自动回复","uri":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/"},{"categories":["编程"],"content":"根据关键词自动回复 如果用户给公众号发送一段text消息，比如\"hello\"，那么后台收到的xml就是: \u003cxml\u003e \u003cToUserName\u003e\u003c![CDATA[公众号]]\u003e\u003c/ToUserName\u003e \u003cFromUserName\u003e\u003c![CDATA[粉丝号]]\u003e\u003c/FromUserName\u003e \u003cCreateTime\u003e1460541339\u003c/CreateTime\u003e \u003cMsgType\u003e\u003c![CDATA[text]]\u003e\u003c/MsgType\u003e \u003cContent\u003e\u003c![CDATA[hello]]\u003e\u003c/Content\u003e \u003c/xml\u003e 其中MsgType有\"text\"、“image”、“voice”、“video”、“link”、“event”、“location\"等多种类型。 公众号给用户发消息也是同理，公众号向用户发送一个xml，只是发件人和收件人对调，内容自定。 \u003cxml\u003e \u003cToUserName\u003e\u003c![CDATA[粉丝号]]\u003e\u003c/ToUserName\u003e \u003cFromUserName\u003e\u003c![CDATA[公众号]]\u003e\u003c/FromUserName\u003e \u003cCreateTime\u003e1460541339\u003c/CreateTime\u003e \u003cMsgType\u003e\u003c![CDATA[text]]\u003e\u003c/MsgType\u003e \u003cContent\u003e\u003c![CDATA[test]]\u003e\u003c/Content\u003e \u003c/xml\u003e 接下来，在已有receive.py和reply.py的前提下，我们可以通过修改handle.py来自定义公众号如何进行自动回复。 handle.py中对应部分 class Handle(object): def GET(self): ... def POST(self): ... if recMsg.MsgType == 'text': content = automaticReply(recMsg.Content) # 判断接受的信息是否包含预设的关键词交由一个独立的方法来处理 replyMsg = reply.TextMsg(toUser, fromUser, content) return replyMsg.send() ps: python中字符串前加u以确保后续字符串以unicode进行编码，一般用于中文字符串前，防止因源码储存问题出现的乱码。但不需要对字符串再使用encode(‘utf-8‘),不然就会变成b’\\xe3\\xe2…‘的格式。 ","date":"2022-03-23","objectID":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/:2:0","tags":["Python","微信公众号"],"title":"Python实现开发模式下公众号自动回复","uri":"/python%E5%AE%9E%E7%8E%B0%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/"},{"categories":["服务器"],"content":"Tags: #python #webpy #环境部署 Links: [[Python下web.py使用ssl加密]], [[Python实现开发模式下公众号自动回复]] Python下web.py的环境部署 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/:0:0","tags":["Python","WebPy","Supervisor"],"title":"Python下web.py的环境部署","uri":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"},{"categories":["服务器"],"content":"prerequisites: 当[[web.py]]被用于对接微信公众号时，必要的前置为： python2.7版本以上 yum install python3 [[pip]] pip3 install --upgrade pip web.py python3 -m pip install web.py libxml2 libxslt lxml python3 -m pip install lxml ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/:1:0","tags":["Python","WebPy","Supervisor"],"title":"Python下web.py的环境部署","uri":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"},{"categories":["服务器"],"content":"部署： [[Supervisor]]: Supervisord是一个守护进程的工具，当进程意外终止或服务器掉电重启后，进程可以继续自动运行。同时supervisord自带监控界面，可以通过浏览器灵活地查看、操作。 安装： ubantu: apt-get install supervisor centos: yum install supervisor 配置supervisord.conf文件： centos系统下该文件在/etc/目录下，ubantu系统下该文件在/etc/supervisor/目录下： ubantu: sudo vim /etc/supervisor/supervisord.conf centos: sudo vim /etc/supervisord.conf 配置： 在文件末尾添加如下几行： [program:myProgramName] command=python3 /home/myname/test.py 80 autostart=true autorestart=true stdout_logfile=/home/myname/test.log 最后一行表示程序打印出的信息都记录在该test.log文件内。 4. 运行： 启动supervisor和自己的程序： supervisord -c /etc/supervisord.conf 意为按照配置文件执行supervisor 5. 常用命令： service supervisor stop #停止supervisor服务 service supervisor start #启动supervisor服务 supervisorctl shutdown #关闭所有任务 supervisorctl stop|start program_name #启动或停止某项服务 supervisorctl status #查看所有任务状态 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/:2:0","tags":["Python","WebPy","Supervisor"],"title":"Python下web.py的环境部署","uri":"/python%E4%B8%8Bweb.py%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"},{"categories":["服务器"],"content":"Tags: #python #webpy #ssl #https Links: [[Python下web.py的环境部署]], [[Python实现开发模式下公众号自动回复]] Python下web.py使用ssl加密 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:0:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["服务器"],"content":"[[https]]，ssl与[[443端口]]： 一般默认采用https://开头时是使用的443端口。而如果要使用https://就必须要配置ssl证书。 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:1:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["服务器"],"content":"[[ssl]]证书： 可以利用openssl自签发ssl证书，也可以去阿里云或其他网络服务提供商购买收费型证书。没有可信的ssl证书，即使采用了https协议，也不会外来访问源认可。 openssl自签发证书举例： 首先通过如下shell命令，回答问题，设置密码生成证书。 openssl genrsa -des3 -out server.key 1024 openssl req -new -key server.key -out server.csr openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt 然后在有证书的文件夹下，通过如下命令来避免执行程序时输入密码的操作： openssl rsa -in server.key -out server.key pem, crt: 为证书 key: 为私钥 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:2:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["服务器"],"content":"绑定[[IP]]： 阿里云收费型ssl证书才提供绑定ip的功能，不需要绑定域名，在对接三方API时，可以直接使用IP作url访问。 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:3:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["服务器"],"content":"绑定[[域名]]： 只能绑定域名的ssl证书，在部署后，还需要为该域名进行单独解析，解析到自己想要的IP地址上，然后才可以通过访问https://域名，代替直接访问https://IP。只需要设置域名解析，不需要再配置web程序。 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:4:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["服务器"],"content":"[[web.py]]下使用ssl： import web from handle import Handle from cheroot.server import HTTPServer from cheroot.ssl.builtin import BuiltinSSLAdapter HTTPServer.ssl_adapter = BuiltinSSLAdapter( certificate='/www/server.pem', private_key='/www/server.key') urls = ( '/wx', 'Handle', ) if __name__ == '__main__': app = web.application(urls, globals()) app.run() 必须添加HTTPServer和BuiltinSSLAdapter包，然后填入自己的ssl证书和私钥路径。然后后台执行命令python3 main.py 443来启动程序。 ","date":"2022-03-23","objectID":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/:5:0","tags":["Python","WebPy","ssl"],"title":"Python下web.py使用ssl加密","uri":"/python%E4%B8%8Bweb.py%E4%BD%BF%E7%94%A8ssl%E5%8A%A0%E5%AF%86/"},{"categories":["编程"],"content":"Tags: #VBA #Excel Links: VBA表之间的数据转移 Sub transfer() '使用前需要确保数据导出的工作本里都是需要的工作簿 '如果有多余不需要的工作簿，则选中所有需要的工作簿，然后另存为新的工作本以供使用 '需要确保两个工作本里表头的单元格首尾没有空格 '如果有哪个表的店铺一栏是空的，得填一些内容上去，确保该列不为空 Application.ScreenUpdating = False '选择单一文件 With Application.FileDialog(msoFileDialogFilePicker) .AllowMultiSelect = False '单选择 .Filters.Clear '清除文件过滤器 .Filters.Add \"Excel Files\", \"*.xlsx;*.xlsm;*.xls;*.xlw\" .Filters.Add \"All Files\", \"*.*\" '设置两个文件过滤器 If .Show = -1 Then 'FileDialog 对象的 Show方法显示对话框，并且返回-1（如果你按OK）和0（如果你按Cancel） ' MsgBox \"您选择的文件是\" \u0026 .SelectedItems(1), vbOKOnly + vbInformation, \"智能Excel\" sourcebookpath = .SelectedItems(1) End If End With Dim source As Workbook Dim sh1, sh2 As Worksheet Set sourcebook = Workbooks.Open(sourcebookpath) Set sh1 = ThisWorkbook.Sheets(1) Set sh2 = sourcebook.Sheets(1) columnMax1 = sh1.Range(\"IV1\").End(xlToLeft).Column 'sheets预处理（表格不规范时每次都要调整）----------------------------------- Dim usefulSheets1() ReDim usefulSheets1(1 To sourcebook.Worksheets.count) Dim countSheets1 As Integer countSheets1 = 1 For i = 1 To sourcebook.Worksheets.count If (InStr(sourcebook.Sheets(i).Name, \"ÍË¿î\") = 0) And (InStr(sourcebook.Sheets(i).Name, \"·Ñ\") = 0) And (sourcebook.Sheets(i).Visible = True) Then Set usefulSheets1(countSheets1) = sourcebook.Sheets(i) countSheets1 = countSheets1 + 1 End If Next Dim usefulSheets() ReDim usefulSheets(1 To countSheets1) Dim countSheets2 As Integer countSheets2 = 1 For i = 9 To (countSheets1 - 1) Set usefulSheets(countSheets2) = usefulSheets1(i) countSheets2 = countSheets2 + 1 Next '----------------------------------------------------------- '从表一转移数据到表二 Dim existingRows As Integer existingRows = 3 For i = 1 To (countSheets2 - 1) 'Set sh2 = sourcebook.Sheets(i) Set sh2 = usefulSheets(i) '确定两张表的表头各自对应 columnMax2 = sh2.Range(\"IV1\").End(xlToLeft).Column Dim columnIndex() ReDim columnIndex(1 To columnMax1) '表头前两列-组别（平台）和店铺手动设置 columnIndex(1) = 1 columnIndex(2) = 2 For j = 3 To columnMax1 For k = 3 To columnMax2 If Trim(sh1.Cells(2, j)) = Trim(sh2.Cells(1, k)) Then columnIndex(j) = k Exit For End If Next Next Dim isFinished As Boolean isFinished = False Dim a As Integer a = 2 Do If IsEmpty(sh2.Cells(a, 2)) Then '判定该表已读完 If IsEmpty(sh2.Cells(a + 1, 2)) And IsEmpty(sh2.Cells(a + 2, 2)) Then isFinished = True End If Else For b = 2 To columnMax1 '表一没有的数据，表二仍为空 If IsEmpty(columnIndex(b)) Then sh1.Cells(existingRows, b) = Empty Else sh1.Cells(existingRows, b) = sh2.Cells(a, columnIndex(b)) End If Next '添加组别名 If IsEmpty(sh2.Cells(a, 1)) Then sh1.Cells(existingRows, 1) = sh1.Cells(existingRows - 1, 1) Else sh1.Cells(existingRows, 1) = sh2.Cells(a, 1) End If '计数，汇总表添加一行 existingRows = existingRows + 1 End If '读取目标表下一行 a = a + 1 '依据需求自行调整该段以判定下方是否还有有用数据 '若无，则判定该表是否已完全转移完 'If sh2.Cells(a, 1) = \"\" Then ' isFinished = True 'End If Loop While isFinished = False Next sourcebook.Close ThisWorkbook.Save Application.ScreenUpdating = True End Sub ","date":"2022-03-23","objectID":"/vba%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E7%A7%BB/:0:0","tags":["VBA","Excel"],"title":"VBA表之间的数据转移","uri":"/vba%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E7%A7%BB/"},{"categories":["心理"],"content":"Tags: #精神分析 #心理学 #弗洛伊德 Sources: https://zhuanlan.zhihu.com/p/86865507 Links: 弗洛伊德之精神分析理论的48个经典案例 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:0:0","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"一、意识与无意识 无意识又分为 无意识和前意识 前意识是知识或想法等多种形态的记忆所在的地方。它处在无意识的表面或意识和无意识之间。 自我是利用 压抑(repression) 的心理机制(mental mechanism)把不适宜的欲望和想法驱逐到无意识里。 （意识形态-2，对立） 将意识和无意识分开的防御机制是压抑。弗洛伊德把压抑说成是精神分析理论的基础。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:1:0","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"二、人格的发展过程 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:0","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"1. 胎儿期 母亲的情绪稳定，胎儿的情绪也稳定，这是日后形成稳定人格的基础 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:1","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"2. 口欲期 出生是一种精神创伤，成为焦虑的最初事件 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:2","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"3. 肛欲期 肛期产生了自身控制、独立性、自主性及自尊等，还有羞耻心和嫌恶之感 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:3","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"4. 分离-个体化过程 正常自闭期 （0-2、3个月。无法区分自我和非我，认为世上所有一切和自己都是一体） 共生期 （2、3-4、5个月。母子心理共生，孩子无法区分我和“非我的客体”，无法区分内部和外部。但婴儿能识别母亲，没啥区别也宠爱孩子） 分离-个体化时期 （5-36个月） 区分期 操练期 调节期 恒常客体形成期 （母亲的表征不再分为“好妈妈”和“坏妈妈”，认识到虽然有时妈妈责怪自己，可妈妈始终如一爱自己。“好妈妈”和“坏妈妈”的表征合二为一，只有这样，才能长久地维持相对稳定的人际关系） 有恒常客体的人的特征： 良好的母亲表征，彼此关系融洽。“我喜欢妈妈，妈妈也喜欢我”。在现实的人际关系中产生的矛盾较少。 将母亲“好的一面”的表征和“讨厌的一面”的表征整合为一个表征。“虽然有时妈妈责怪我，但妈妈是好人。” 会适时地利用心里的妈妈表征。“妈妈就在身边，发生任何事情我也不怕”。孩子内心存在内化的母亲。因此，有的孩子可以自己玩上10分钟，甚至一天。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:4","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"5. 性蕾期 4-6岁。口期快乐的源泉是嘴，1岁左右移到肛门，3岁左右移到性器，直到7岁 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:5","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"6. 潜伏期 6、7岁到12岁，孩子对性几乎不关心 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:6","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"7. 青少年期 10、12到20、22岁。青少年克服性冲动和情绪焦虑的方法是使用知识化、理想化、禁欲主义、信仰宗教等手段 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:7","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"8. 成人期 因循守旧式、创造式、平凡式 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:2:8","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"三、防御机制 防御机制是自我为了处理冲突所做的努力。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:0","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"1. 压抑 （repression）是最常用的防御机制，将意识难以容纳的想法、欲望、冲动等推进无意识里。 精神分析工作就是克服压抑的过程。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:1","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"2. 压制 （suppression） 指意识或半意识里为忘记某一件事而进行的努力。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:2","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"3. 抵消 在无意识里，感觉到由于自己的性欲望或敌对欲望给对方带去伤害时，为取消已给对方带来的伤害，而采取恢复原状的行动。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:3","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"4. 反相形成 指表现出的态度和言行与心中的欲望正相反。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:4","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"5. 赔偿 为了从无意识的负罪感中解脱出来而做的自讨苦吃的行为 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:5","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"6. 认同 指被父母、长辈等重要人物的态度和行为同化，并加以仿效。认同有多种形式： 敌对或负性的认同 与攻击者的认同 假想的、病理的认同 共情 （共情理解虽是暂时性和局限性的，却是健康形态的认同。共情是最高的理解，而且有心理治疗的效果。是超越逻辑和语言的情感层面的理解。共情的两个人是独立的个体，可以交流感情而不失去独立性，这是健全的共情。如果失去独立性，受患者的情绪感染，那么分析家也将抑郁。） *几个易混淆的概念: 同情 是自己陷入对方的情感世界无法自拔，不但帮不到对方，连自己也会受伤 合一指婴儿期不能区分“自我”和“非我”。即将外界的客体原封不动地纳入到自我结构里的原始认同 内投射是幼儿大一些后，能够区分“自我”和“非我”时的认同。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:6","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"7. 投射 指自身无意识里产生的攻击和冲动推诿到他人身上或归咎于别人。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:7","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"8. 攻击自身 指攻击冲动指向自己。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:8","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"9. 置换 指原来赋予无意识客体的感情移到危险性较小的客体的过程。（移情和恐惧症也由置换产生，象征化也类似） ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:9","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"10. 替代 指为了减少达不到目的而产生的挫败感，选择与原来相似的客体获得满足。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:10","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"11. 否认 是心理发展过程中的一种最原始的防御机制，指将意识化后无论如何也不能承受的一些想法、欲望、冲动以及现实存在的东西在无意识中加以否定。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:11","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"12. 象征化 指用某种客体或思想表现出其他客体或思想时所使用的心理机制。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:12","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"13. 代偿 指无意识里通过实际努力或想象的努力，来弥补自己的性格、只能、外貌等方面的缺憾。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:13","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"14. 合理化 指为不明动机引出的行为寻找合理事由的防御机制。（自己胡作非为，还非难和诽谤别人，是一种分裂状态，会阻止人格的成长，陷入自我混乱，导致人际关系的障碍） ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:14","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"15. 隔离 指将与过去的痛苦记忆相关的情感从意识里隔离开的过程，因而只能记住痛苦的事实，而无法感觉到被压抑的情感，各自处在分离状态。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:15","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"16. 理智化 是一种比隔离更好的防御机制，即为了抑制感情和冲动，不去直接体验它们，而是对其仔细思考。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:16","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"17. 退行 指受到严重挫折时倒退到过去幼稚的水平。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:17","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"18. 分离 指造成内心冲突的哪些内容脱离了个人的控制，表现了出来。如梦游症、双重人格、神游症等。（人格未成熟的人，面临极大的痛苦又无力解决时，会发生这种情况） ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:18","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"19. 阻抗 指阻挡被压抑的内容进入到意识里，因为这些内容进入意识会使人痛苦。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:19","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"20. 阻隔 指在几个相互联系的想法中，在先的能够记住，但以后的某些在意识领域里不被容纳的想法则因被压抑而无法记忆起来。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:20","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"21. 躯体化 指心理冲突表现在除感官器官、随意肌系统以外的躯体的症状。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:21","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"22. 性化 指在原本与性无关的问题上大做文章，赋予很多性的意味和行为。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:22","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"23. 禁欲主义 指反对在意识里的任何快乐享受，并从这种禁欲中获得满足，其目的是要斩断快乐的根源。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:23","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"24. 幽默 是在对自己和他人不觉得难为情和不愉快的前提下，将自己的感觉愉快地、公开地表现出来。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:24","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"25. 利他主义 指执拗地、建设性地帮助他人，以满足本能的欲望。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:25","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"26. 分裂 将对自己及他人的表征和态度分裂成“全好”和“全坏”两个完全相反的情况。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:26","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"27. 投射认同 是一种原始的防御机制，有三个阶段： 患者向分析家投射内心的表象 分析家无意识中接受患者投射并给以认同，而且在患者的操纵下感觉和行动，即患者向分析家接受患者的投射认同过程命名为投射性反认同，是一种反移情 被投射的内容经分析家修正后再向患者内化 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:27","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"28. 回避 指与危险的情况或客体保持一个安全距离的反应。（有意识性回避和非意识性回避两种可能。有时，非意识性回避可用来判断”正常的喜欢和讨厌“） ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:28","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"29. 升华 指把为社会所不容的冲动和欲望的能量用于为社会所允许的活动中，尤其是创造性工作中，这是最健康的防御机制。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:29","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"30. 防御 过程是利用多种防御机制，活的复杂的有组织的运动、直觉、认知的自我技能。有如下四种： 性格防御 （持续地采取某种态度或反应对待他人，并以人格的形式固定下来，以此摆脱焦虑，保护自身。） 转化 （内心冲动通过身体的感觉器官和随意肌的症状表现。如心因性失明。转换所启动的防御机制包括压制、认同、置换、否定、象征化等） 幻想 （这是一种自我适应过程，有着重要作用。和白日梦不同） 梦 （梦有满足心理愿望和防御焦虑的技能。梦的内容可分为两种：显梦和隐梦。显梦是梦中看到的表象。隐梦是引起这个显梦的无意识根源。隐梦的内容是梦真正意义之所在，有四种根源：本能欲望、身体的感觉注入、现实生活中的愿望、白天发生的事情） ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:3:30","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"四、精神分析的过程 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:4:0","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"分析的前期 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:4:1","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"分析的中期 阻抗 原因： - 不愿意改变现实生活 - 不愿意放弃无意识愿望的满足 - 不愿意正视无意识冲突 应对方法： - 直接询问想要知道的问题 - 等待患者打破沉默，继续进行联想。 （沉默时应首先想到，”是什么问题在阻挠说话？“。患者对分析家的反应患得患失，是幼儿期和父母关系的再现。） 一般来说，分析很艰难，经常处于愉快感是在回避抑郁感 1. 在分析内容前，先分析阻抗 2. 在分析本我前，先分析自我 3. 从表层着手 移情 反移情 反移情的前兆： - 分析家希望自己成为患者心目中的重要人物，希望患者依赖自己 - 分析家希望自己拥有解决一切问题的能力 - 分析家有操纵或支配患者的欲望 - 分析家在为异性患者治疗时感到心情愉快 - 分析家无法治疗具有某种冲突（如攻击冲突）或者某种障碍（如同性恋）的患者 - 分析家具有偷窥癖，为了满足自己的欲望和好奇心，对患者的私生活寻根究底 领域 （精神分析的终极目标，是使患者具有成熟和满意的心理适应能力。只有靠切身的体会及心灵认识才能改变一个人） 修通 （大部分患者需要接受分析很长时间，因为获得情感领悟需要很长时间 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:4:2","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"分析的终结 精神分析治疗的目标是让患者达到最大限度的自我成熟和独立，因此，分析家在分析的最终阶段里必须帮助患者解除移情关系。如果患者经常压抑悲痛情绪，或者回避悲伤情感，也会影响彻底消除移情关系 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:4:3","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["心理"],"content":"精神分析的效果 治疗不是通过认知过程完成的，而是通过治疗关系完成的，不过这个过程大部分发生于无意识中。将精神分析理解为”成长“。即纠正早年成长中被中断或歪曲的经验，帮助重新成长的过程。 精神分析的目的并非是让人的内心永不受矛盾冲突的侵扰。而是将神经症性的不行转化为一般的不幸，找到那个合理、现实的自我，更为高效的工作。更为热烈的热爱生活。 ","date":"2022-03-23","objectID":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/:4:4","tags":["精神分析"],"title":"弗洛伊德之精神分析理论的48个经典案例","uri":"/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E4%B9%8B%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E7%9A%8448%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"},{"categories":["编程"],"content":"Tags: #微信公众号 #自动回复 #文字菜单 Links: [[Python实现开发模式下公众号自动回复]] 微信公众号可点击式文字菜单 基于微信浏览器的URL Schemes来实现对微信内部消息的控制，weixin://。 基本格式如下： weixin://bizmsgmenu?msgmenucontent=这里写菜单内容\u0026msgmenuid=这里写菜单ID 使用方法如下： \u003ca href=\"weixin://bizmsgmenu?msgmenucontent=充值\u0026msgmenuid=1\"\u003e充值\u003c/a\u003e 当用户点击该超链接生成的蓝色可互动文字时，客户端将代替用户自动向微信服务器发送指定的文字消息 ","date":"2022-03-23","objectID":"/%E5%8F%AF%E7%82%B9%E5%87%BB%E5%BC%8F%E6%96%87%E5%AD%97%E8%8F%9C%E5%8D%95/:0:0","tags":["微信公众号"],"title":"微信公众号可点击式文字菜单","uri":"/%E5%8F%AF%E7%82%B9%E5%87%BB%E5%BC%8F%E6%96%87%E5%AD%97%E8%8F%9C%E5%8D%95/"}]